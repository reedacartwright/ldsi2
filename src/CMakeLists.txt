ADD_DEFINITIONS(-DHAVE_CONFIG_H "\"-DPACKAGE_STRING=\\\"ldsi ${LDSI_VERSION}\\\"\"")
#ADD_DEFINITIONS(-DNDEBUG)
#ADD_DEFINITIONS(-D_DEBUG)

IF(CMAKE_COMPILER_IS_GNUCC)
  SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Wall")
ENDIF(CMAKE_COMPILER_IS_GNUCC)

IF(CMAKE_COMPILER_IS_GNUCC)
  SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Wall")
ENDIF(CMAKE_COMPILER_IS_GNUCC)

IF(MSVC)
  ADD_DEFINITIONS(-D_CRT_SECURE_NO_DEPRECATE -D_CRT_NONSTDC_NO_DEPRECATE)
  ADD_DEFINITIONS(-D_SCL_SECURE_NO_DEPRECATE)
  SET(CMAKE_C_FLAGS "${MY_C_FLAGS} /wd4100 /wd4101 /wd4189 /wd4706")
  IF(USE_STATIC_LIBS)
    STRING(REGEX REPLACE "/MD" "/MT" CMAKE_C_FLAGS_RELEASE "${CMAKE_C_FLAGS_RELEASE}")
    STRING(REGEX REPLACE "/MDd" "/MTd" CMAKE_C_FLAGS_DEBUG "${CMAKE_C_FLAGS_DEBUG}")
    STRING(REGEX REPLACE "/MD" "/MT" CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE}")
    STRING(REGEX REPLACE "/MDd" "/MTd" CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG}")
  ENDIF(USE_STATIC_LIBS)
  
  # Use the highest warning level for visual studio.
  SET(CMAKE_C_WARNING_LEVEL 4)
  IF(CMAKE_C_FLAGS MATCHES "/W[0-4]")
    STRING(REGEX REPLACE "/W[0-4]" "/W4"
           CMAKE_C_FLAGS "${CMAKE_C_FLAGS}")
  ELSE(CMAKE_C_FLAGS MATCHES "/W[0-4]")
    SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} /W4")
  ENDIF(CMAKE_C_FLAGS MATCHES "/W[0-4]")
ENDIF(MSVC)

FIND_PACKAGE(Boost COMPONENTS program_options)
IF(Boost_FOUND)
  INCLUDE_DIRECTORIES(${Boost_INCLUDE_DIRS})
  LINK_DIRECTORIES(${Boost_LIBRARY_DIRS})
ENDIF(Boost_FOUND)

FIND_PACKAGE(GSL)
IF(GSL_FOUND)
  INCLUDE_DIRECTORIES(${GSL_INCLUDE_DIR})
  LINK_DIRECTORIES(${GSL_LINK_DIRECTORIES})
  SET(MY_EXE_LINKER_FLAGS "${MY_EXE_LINKER_FLAGS} ${GSL_EXE_LINKER_FLAGS}")
ENDIF(GSL_FOUND)

IF(UNIX)
	SET(CMAKE_REQUIRED_LIBRARIES m)
ENDIF(UNIX)
CHECK_FUNCTION_EXISTS(log1p HAVE_LOG1P)
IF(UNIX)
	SET(CMAKE_REQUIRED_LIBRARIES)
ENDIF(UNIX)

CHECK_FUNCTION_EXISTS(getpid HAVE_GETPID)
CHECK_FUNCTION_EXISTS(_getpid HAVE__GETPID)

CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/config.h.cmake ${CMAKE_CURRENT_BINARY_DIR}/config.h)
INCLUDE_DIRECTORIES(BEFORE "${CMAKE_CURRENT_BINARY_DIR}")

ADD_EXECUTABLE(ldsi app.cpp pop.cpp)

TARGET_LINK_LIBRARIES(ldsi ${Boost_LIBRARIES} ${GSL_LIBRARIES})

INSTALL(TARGETS ldsi RUNTIME DESTINATION bin)

INCLUDE(InstallRequiredSystemLibraries)
 
